
  
O- OPEN/CLOSED PRINCIPLE (Classes should be open for extension but closed for modification)
The general idea of this principle is great. It tells you to write your code so that you will be able to add new functionality without changing the existing code. That prevents situations in which a change to one of your classes also requires you to adapt all depending classes. Open for extensions means that the behavior of the class can be extended without modifying the class. It can be achieved by Abstraction.
The main benefit of this approach is that an interface introduces an additional level of abstraction which enables loose coupling. The implementations of an interface are independent of each other and don’t need to share any code. If you consider it beneficial that two implementations of an interface share some code, you can either use inheritance or composition.
Example: Shipped laptops comes with the basics like WIFI, Bluetooth, speaker but via the update, you can extend the laptop capabilities to allow you to manage your to do list etc. Your laptop’s core system (Kernel OS) code are closed for the modification.
Code example:
public class Square
{
    public double length { get; set; }
    }
public class AreaCalculator
{
    public double Area(Square[] shapes)
    {
        double area = 0;
        foreach (var shape in shapes)
        {
            area += shape.length*shape.length;
        }

        return area;
    }
}
public double Area(object[] shapes)
{
    double area = 0;
    foreach (var shape in shapes)
    {
        if (shape is Square)
        {
            Square square = (Square) shape;
            area += sqaure.length*square.length;
        }
        else
        {
            Circle circle = (Circle)shape;
            area += circle.Radius * circle.Radius * Math.PI;
        }
    }

    return area;
}

