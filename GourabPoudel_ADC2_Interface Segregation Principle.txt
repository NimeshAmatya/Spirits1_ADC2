It’s a fourth post on SOLID principles.
This principle is very much related to the Single Responsibility Principle. What it really means is that you should always design your abstractions in a way that the clients that
 are using the exposed methods do not get the whole pie instead. 
This example is about an interface for the User Interface for an ATM, that handles all requests such as a deposit request, or a withdrawal request, and how this interface needs to
 be segregated into individual and more specific interfaces.


Code Example:
type ByteUtils interface {
    Read(b []byte) (n int, err error) // Read into buffer
    Write(b []byte)(n int, err error) // Write into buffer
    Trim(b []byte, exclusions string)[]byte // Trim buffer by removing bytes from the exclusion chars
}